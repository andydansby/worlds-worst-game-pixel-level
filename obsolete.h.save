#ifndef OBSOLETE_H
#define OBSOLETE_H

//-----------------------------------------------------------------------
//	obsolete routines
//-----------------------------------------------------------------------


/*void clean_baddies_array (void)
{
	for (temp1 = 0; temp1 < MAX_ENEMIES_ON_SCREEN; ++ temp1)
	{
		baddies[temp1].x_desp = 0;
		baddies[temp1].x = 0;
		baddies[temp1].y =  0;
		baddies[temp1].sprnum = 0;
		baddies[temp1].movement = 0;
		baddies[temp1].energy = 0;
		baddies[temp1].param1 = 0;
		baddies[temp1].param2 = 0;
		baddies[temp1].wherefrom = 0;
	}
}*/


void enter_player_location (void)
{
	printf("Enter in your ship's location\n0 - 254\n");

	fgets(arrayInput,sizeof(arrayInput),stdin);
	player_x_position = atoi(arrayInput);
	printf("\n\n");
	in_pause(200);
}


void print_player_location (void)
{
	printf("Player position = %d\n", player_x_position);
	printf("Press a Key");
	printf("\n\n");
	in_pause(400);
}



void print_pointer_address()
{
	extern unsigned int LEVEL_1_ENEMIES_LOCATIONS;
	pointerAddy = &LEVEL_1_ENEMIES_LOCATIONS;

	printf(" LEVEL_1_ENEMIES_LOCATIONS\n pointer address\n\n");

	printf("%u\n", pointerAddy);
	printf("%x\n", pointerAddy);


	printf("\nPress the ANY key\nWherever that is");
}


void search_exact_to_player (void)
{
	//player_x_position  = where the player is
	extern unsigned int LEVEL_1_ENEMIES_LOCATIONS;
	pointerAddy = &LEVEL_1_ENEMIES_LOCATIONS;//address of pointer
	//enemies_per_level =  memory_bpeek(pointerAddy);

	for (temp1 = 0; temp1 < enemies_per_level; temp1 ++)
	{
		if (enemy_locations[temp1].x	 == player_x_position)
		{
			printf("%d\n", enemy_locations[temp1].x_desp);
			printf("%d\n", enemy_locations[temp1].x);
			printf("%d\n", enemy_locations[temp1].y);
			printf("%d\n", enemy_locations[temp1].sprnum);
			printf("%d\n", enemy_locations[temp1].movement);
			printf("%d\n", enemy_locations[temp1].energy);
			printf("%d\n", enemy_locations[temp1].param1);
			printf("%d\n", enemy_locations[temp1].param2);
			printf("---------\n");
		}
	}
	printf("\n\nPress a Key");
}



void delete_single_baddy (void)
{
	for (temp1 = enemyToDelete; temp1 < MAX_ENEMIES_ON_SCREEN -1; temp1 ++)
	{
		baddies[temp1].x_desp = baddies[temp1 + 1].x_desp;
		baddies[temp1].x = baddies[temp1 + 1].x;
		baddies[temp1].y = baddies[temp1 + 1].y;
		baddies[temp1].sprnum = baddies[temp1 + 1].sprnum;
		baddies[temp1].movement = baddies[temp1 + 1].movement;
		baddies[temp1].energy = baddies[temp1 + 1].energy;
		baddies[temp1].param1 = baddies[temp1 + 1].param1;
		baddies[temp1].param2 = baddies[temp1 + 1].param2;
	}
}


void print_nearest_baddies(void)
{
	printf("Nearest Baddies\n");

	for (temp1 = 0; temp1 < enemies_per_level; temp1 ++)
	{
		if ((enemy_locations[temp1].x >= playerLow) && (enemy_locations[temp1].x <= playerHigh) )
		{
			printf("%d)---", temp1);

			printf("%d    ", enemy_locations[temp1].x_desp);
			printf("%d    ", enemy_locations[temp1].x);
			printf("%d    ", enemy_locations[temp1].y);
			printf("%d    ", enemy_locations[temp1].sprnum);
			//printf("\n");
			printf("%d    ", enemy_locations[temp1].movement);
			printf("%d    ", enemy_locations[temp1].energy);
			printf("%d    ", enemy_locations[temp1].param1);
			printf("%d    ", enemy_locations[temp1].param2);
			printf("\n");
			printf("----------------------------------------------------\n");
		}
	}
	printf("\n\nPress a Key");
}


void index_cleared_baddies (void)
{
	temp2 = 0;
	number_of_index_baddies = 0;

	for (temp1 = 0; temp1 < MAX_ENEMIES_ON_SCREEN; ++ temp1)
	{
		if (baddies[temp1].sprnum == MAX_U_CHAR)//<---
		{
			indexToDelete[temp2] = baddies[enemyToDelete].wherefrom;
			number_of_index_baddies ++;
		}
		else
		{
			indexToDelete[temp2] = MAX_U_CHAR;
		}

		//now clean baddies array at the same time to speed things along
		baddies[temp1].x_desp = 0;
		baddies[temp1].x = 0;
		baddies[temp1].y =  0;
		baddies[temp1].sprnum = 0;
		baddies[temp1].movement = 0;
		baddies[temp1].energy = 0;
		baddies[temp1].param1 = 0;
		baddies[temp1].param2 = 0;
		baddies[temp1].wherefrom = 0;

		temp2 ++;
	}
}


void search_enemy_array2 (void)
{
    temp2 = 0;//no more than 6 entries
	temp1 = player_x_desp_position;

	playerLow = player_x_desp_position;
	playerHigh = player_x_desp_position + NEAR_PLAYER;//   NEAR_PLAYER = 2

	if (playerHigh > MAX_PLAYER_POS)    //MAX_PLAYER_POS = 255
		playerHigh = MAX_PLAYER_POS;


    //printf("WTF1\n");

    while (temp2 < MAX_ENEMIES_ON_SCREEN )  //MAX_ENEMIES_ON_SCREEN = 6
	{
	    //printf("WTF2\n");


		temp3 = enemy_locations[temp1].x_desp;

		if(temp3 > playerHigh)
		{	break;}//if out of range

		if (temp3 == 0)
		{	temp1 ++;}//to bypass deleted baddies

		printf("x_desp = %d\n", enemy_locations[temp1].x_desp);

		printf("x = %d", enemy_locations[temp1].x);
		printf("        ");
		printf("y = %d\n", enemy_locations[temp1].y);

        printf("sprnum = %d", enemy_locations[temp1].sprnum);
        printf("        ");
        printf("movement = %d", enemy_locations[temp1].movement);
        printf("        ");
		printf("energy = %d\n", enemy_locations[temp1].energy);

		printf("param1 = %d", enemy_locations[temp1].param1);
        printf("        ");
		printf("param2 = %d\n", enemy_locations[temp1].param2);

        printf("--------------------------\n");


		temp1 ++;//44046
		//++ temp1;//44051

		temp2 ++;//44046
		//++ temp2;//44048
	}
}


void search_enemy_array3 (void)
{
    temp2 = 0;//no more than 6 entries
	temp1 = player_x_desp_position;

	playerLow = player_x_desp_position;
	playerHigh = player_x_desp_position + NEAR_PLAYER;//   NEAR_PLAYER = 2

	if (playerHigh > MAX_PLAYER_POS)    //MAX_PLAYER_POS = 255
		playerHigh = MAX_PLAYER_POS;


    //printf("WTF1\n");

    while (temp2 < MAX_ENEMIES_ON_SCREEN )  //MAX_ENEMIES_ON_SCREEN = 6
	{
	    //printf("WTF2\n");


		temp3 = enemy_locations[temp1].x_desp;

		if(temp3 > playerHigh)
		{	break;}//if out of range

		//if (temp3 == 0)
		//{	temp1 ++;}//to bypass deleted baddies

		printf("x_desp = %d\n", enemy_locations[temp1].x_desp);

		printf("x = %d", enemy_locations[temp1].x);
		printf("        ");
		printf("y = %d\n", enemy_locations[temp1].y);

        printf("sprnum = %d", enemy_locations[temp1].sprnum);
        printf("        ");
        printf("movement = %d", enemy_locations[temp1].movement);
        printf("        ");
		printf("energy = %d\n", enemy_locations[temp1].energy);

		printf("param1 = %d", enemy_locations[temp1].param1);
        printf("        ");
		printf("param2 = %d\n", enemy_locations[temp1].param2);

        printf("--------------------------\n");


		temp1 ++;//44046
		//++ temp1;//44051

		temp2 ++;//44046
		//++ temp2;//44048
	}
}//end routine


void search_enemy_array4 (void)
{
    signed int s_int_temp1 = 0;

	playerLow = player_x_desp_position;
	playerHigh = player_x_desp_position + NEAR_PLAYER;//   NEAR_PLAYER = 2

	if (playerHigh > MAX_PLAYER_POS)
    {
        //MAX_PLAYER_POS = 255
		playerHigh = MAX_PLAYER_POS;
    }

    //printf("WTF1\n");
    printf("playerLow = %d", playerLow);
    printf("      ");
    printf("playerHigh = %d\n", playerHigh);
    printf("\n");


    for (temp2 = 0; temp2 < MAX_ENEMIES_ON_SCREEN; temp2 ++)
    {//MAX_ENEMIES_ON_SCREEN = 6
//defb 01, 11, 10, 1, bob, 01, $aa, 00;0
//defb 02, 12, 20, 2, bob, 02, $aa, 01;1
//defb 03, 13, 30, 3, bob, 03, $aa, 02;2
//defb 04, 14, 40, 4, bob, 04, $aa, 03;3
//defb 05, 15, 50, 5, bob, 05, $aa, 04;4
//defb 05, 16, 60, 5, bob, 05, $aa, 05;5
//defb 06, 17, 70, 6, bob, 06, $aa, 06;6
//defb 07, 18, 80, 7, bob, 07, $aa, 07;7
//defb 08, 19, 90, 9, bob, 08, $aa, 08;8
//defb 09, 19, 99, 9, bob, 09, $fe, 09;9
////////////////////////////////////////////////
//defb $ff, $ff, 80, 2, bob, 10, $ff, $ff// dummy enemy, to mark the end

        temp1 = player_x_desp_position + temp2;
        temp3 = enemy_locations[temp1].x_desp;

        printf("--------------------------\n");
        printf("temp1 = %d", temp1);
        printf("      ");
        printf("temp2 = %d", temp2);
        printf("      ");
        printf("temp3 = %d\n", temp3);
        printf("--------------------------\n");

		if(temp3 > playerHigh)
		{	break;}//if out of range

		//if (temp3 == 0)
		//{	temp1 ++;}//to bypass deleted baddies

		printf("x_desp = %d\n", enemy_locations[temp3].x_desp);

		printf("x = %d", enemy_locations[temp3].x);
		printf("        ");
		printf("y = %d\n", enemy_locations[temp3].y);

        printf("sprnum = %d", enemy_locations[temp3].sprnum);
        printf("        ");
        printf("movement = %d", enemy_locations[temp3].movement);
        printf("        ");
		printf("energy = %d\n", enemy_locations[temp3].energy);

		printf("param1 = %d", enemy_locations[temp3].param1);
        printf("        ");
		printf("param2 = %d\n", enemy_locations[temp3].param2);

        //printf("--------------------------\n");

    }
}


void search_enemy_array5 (void)
{
    unsigned char temp4;
    signed int temp5;

	playerLow = player_x_position;
	playerHigh = playerLow + NEAR_PLAYER;//   NEAR_PLAYER = 2

	if (playerHigh > MAX_PLAYER_POS)
    {
        //MAX_PLAYER_POS = 250
		playerHigh = MAX_PLAYER_POS;
    }

    //printf("WTF1\n");
    printf("playerLow = %d", playerLow);
    printf("      ");
    printf("playerHigh = %d\n", playerHigh);
    printf("\n");

//
//defb 01, 11, 10, 1, bob, 01, $aa, 00;0
//defb 02, 12, 20, 2, bob, 02, $aa, 01;1
//defb 03, 13, 30, 3, bob, 03, $aa, 02;2
//defb 04, 14, 40, 4, bob, 04, $aa, 03;3
//defb 05, 15, 50, 5, bob, 05, $aa, 04;4
//defb 05, 16, 60, 5, bob, 05, $aa, 05;5
//defb 06, 17, 70, 6, bob, 06, $aa, 06;6
//defb 07, 18, 80, 7, bob, 07, $aa, 07;7
//defb 08, 19, 90, 9, bob, 08, $aa, 08;8
//defb 09, 19, 99, 9, bob, 09, $fe, 09;9
////////////////////////////////////////////////
//defb $ff, $ff, 80, 2, bob, 10, $ff, $ff
// dummy enemy, to mark the end


    for (temp1 = 0; temp1 < MAX_ENEMIES_ON_SCREEN; temp1 ++)
    {//MAX_ENEMIES_ON_SCREEN = 6


        temp3 = enemy_locations[temp1].x_desp;
        if(temp3 > playerHigh)
        {
            printf("TOO HIGH\n");
            return;
        }//if out of range

        if ( (temp3 >= playerLow) && (temp3 <= playerHigh) )
        {
            //printf("IN RANGE\n");

            temp2 = temp1 + playerLow;
            temp4 = temp2 - 1;
            //temp5 = (temp2 - 1);
            //if (temp5 < 0)
            //    temp5 = 1;
            printf("-------------------------------------------\n");
            printf("loop = %d", temp1);
            printf("      ");
            printf("temp2 = %d", temp2);
            printf("      ");
            printf("temp3 = %d", temp3);
            printf("      ");
            printf("temp4 = %d\n", temp4);
            printf("-------------------------------------------\n");

            //if (temp3 == 0)
            //{	temp2 ++;}//to bypass deleted baddies

            printf("x_desp = %d\n", enemy_locations[temp1].x_desp);


            //printf("x = %d", enemy_locations[temp4].x);
            //printf("        ");
            //printf("y = %d\n", enemy_locations[temp4].y);

            //printf("sprnum = %d", enemy_locations[temp4].sprnum);
            //printf("        ");
            //printf("movement = %d", enemy_locations[temp4].movement);
            //printf("        ");
            //printf("energy = %d\n", enemy_locations[temp4].energy);

            //printf("param1 = %d", enemy_locations[temp4].param1);
            //printf("        ");
            //printf("param2 = %d\n", enemy_locations[temp4].param2);

            //printf("--------------------------\n");
        }


        printf("FINISHED IF\n\n");

    }

    printf("Should not SEE ME\n");
}







void search_enemy_array7 (void)
{
    temp1 = player_x_position - 1;
	temp2 = 0;//no more than 6 entries
	temp3 = 0;

	playerLow = player_x_position;
	playerHigh = player_x_position + NEAR_PLAYER;

	if (playerHigh > MAX_PLAYER_POS)
		playerHigh = MAX_PLAYER_POS;

	while (temp2 < playerHigh )
	{
		temp3 = enemy_locations[temp1].x_desp;

		if(temp3 > playerHigh)
		{	break;}//if out of range

		if (temp3 == 0)
		{	temp1 ++;}//to bypass deleted baddies

		/*printf("\ntemp1 = %d", temp1);
		printf("     temp2 = %d", temp2);
		printf("     temp3 = %d", temp3);*/

		printf("%d    ", enemy_locations[temp1].x_desp);
		printf("%d    ", enemy_locations[temp1].x);
		printf("%d    ", enemy_locations[temp1].y);
		printf("%d    ", enemy_locations[temp1].sprnum);
		printf("%d    ", enemy_locations[temp1].movement);
		printf("%d    ", enemy_locations[temp1].energy);
		printf("%d    ", enemy_locations[temp1].param1);
		printf("%d    ", enemy_locations[temp1].param2);
		printf("\n");

		//enemy_locations[temp1].x;
		//enemy_locations[temp1].x_desp;
		//enemy_locations[temp1].y;
		//enemy_locations[temp1].sprnum;
		//enemy_locations[temp1].movement;
		//enemy_locations[temp1].energy;
		//enemy_locations[temp1].param1;
		//enemy_locations[temp1].param2;

		//
        //defb 01, 11, 10, 1, bob, 01, $aa, 00;0
        //defb 02, 12, 20, 2, bob, 02, $aa, 01;1
        //defb 03, 13, 30, 3, bob, 03, $aa, 02;2
        //defb 04, 14, 40, 4, bob, 04, $aa, 03;3
        //defb 05, 15, 50, 5, bob, 05, $aa, 04;4
        //defb 05, 16, 60, 5, bob, 05, $aa, 05;5
        //defb 06, 17, 70, 6, bob, 06, $aa, 06;6
        //defb 07, 18, 80, 7, bob, 07, $aa, 07;7
        //defb 08, 19, 90, 9, bob, 08, $aa, 08;8
        //defb 09, 19, 99, 9, bob, 09, $fe, 09;9
        ////////////////////////////////////////////////
        //defb $ff, $ff, 80, 2, bob, 10, $ff, $ff
        // dummy enemy, to mark the end

		temp1 ++;//44046
		//++ temp1;//44051

		temp2 ++;//44046
		//++ temp2;//44048
	}
}














#endif
//leave blank line after

